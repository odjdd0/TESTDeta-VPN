import logging
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from config import ADMIN_IDS, AGREEMENT_TEXT
from database import get_user_internal_id, register_user, update_config, get_user_stats, get_all_user_ids, get_current_config
from keyboards import get_main_menu, get_admin_panel, get_agreement_keyboard, get_broadcast_keyboard
from states import UserState

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
    return user_id in ADMIN_IDS

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""

    @dp.message_handler(commands=['cancel'], state='*')
    async def cancel_command(message: types.Message, state: FSMContext):
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /admin –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

    @dp.message_handler(commands=['start'], state='*')
    async def start_command(message: types.Message, state: FSMContext):
        await state.finish()
        user_id = message.from_user.id
        username = message.from_user.username or "NoUsername"

        internal_id = get_user_internal_id(user_id)
        if internal_id:
            main_menu_message = await message.answer(
                f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–∞—à ID-VPN: {internal_id}",
                reply_markup=get_main_menu()
            )
            await state.set_state(UserState.MainMenu)
            await state.update_data(main_menu_message_id=main_menu_message.message_id)
        else:
            await message.answer(AGREEMENT_TEXT, reply_markup=get_agreement_keyboard())
            await UserState.AwaitingAgreement.set()

    @dp.callback_query_handler(text="agree", state=UserState.AwaitingAgreement)
    async def process_agreement(callback_query: types.CallbackQuery, state: FSMContext):
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or "NoUsername"

        internal_id, config = register_user(user_id, username)
        if internal_id is None or config is None:
            await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        try:
            await callback_query.message.bot.delete_message(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º: {e}")

        main_menu_message = await callback_query.message.answer(
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–í–∞—à ID-VPN: {internal_id}",
            reply_markup=get_main_menu()
        )
        await state.set_state(UserState.MainMenu)
        await state.update_data(main_menu_message_id=main_menu_message.message_id)
        await callback_query.answer()

    @dp.callback_query_handler(text="get_config", state=UserState.MainMenu)
    async def get_config(callback_query: types.CallbackQuery):
        user_id = callback_query.from_user.id
        internal_id = get_user_internal_id(user_id)

        if internal_id:
            config_text = get_current_config()
            if config_text is None:
                await callback_query.message.answer("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            await callback_query.message.answer(f"–í–∞—à ID-VPN: {internal_id}\n–ö–æ–Ω—Ñ–∏–≥: {config_text}")
        else:
            await callback_query.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

        await callback_query.answer()

    @dp.callback_query_handler(text="future_plans", state=UserState.MainMenu)
    async def show_plans(callback_query: types.CallbackQuery, state: FSMContext):
        user_data = await state.get_data()
        main_menu_message_id = user_data.get("main_menu_message_id")

        try:
            await callback_query.message.bot.edit_message_text(
                text="<b>–ú—ã –¥–µ—Ä–∂–∏–º –∫—É—Ä—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ–≥–æ –í–ü–ù –≤ —É—Å–ª–æ–≤–∏—è—Ö –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –†–§</b>, c—Ç—Ä–∏–º—è—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—è—Å—å –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø—Ä–æ—Å—Ç–æ—Ç—ã, —É–¥–æ–±—Å—Ç–≤–∞, –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö!\n\n"
                     "–í –Ω–µ–∫–æ—Ç–æ—Ä–æ–º —Ä–æ–¥–µ, —ç—Ç–æ —Ç–æ–ª—å–∫–æ MVP-–≤–µ—Ä—Å–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ —Å–ø—Ä–æ—Å–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è. <b>–ï—Å–ª–∏ –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º: @Crypto44LDN</b>\n"
                     "P.S.\n"
                     "<blockquote><span class='tg-spoiler'>–ú—ã –ø–æ–º–Ω–∏–º –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π –£–ö –†–§ –°—Ç. 272: ¬´–ù–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏¬ª, –°—Ç. 273: ¬´–°–æ–∑–¥–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º¬ª, –°—Ç. 274: ¬´–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è/–ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏¬ª, –°—Ç. 63, –°—Ç. 274.4 –∏ 274.5 (–æ—Ç 2025 –≥.) –∏ –º–æ–∂–µ–º —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ –Ω–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ—Ç–∏–≤–æ–∑–∞–∫–æ–Ω–Ω–æ–π –∏–ª–∏ –ø—Ä–µ—Å—Ç—É–ø–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é. –ü—Ä–∏ –∑–∞—è–≤–ª–µ–Ω–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–ª—É–∂–± –†–§ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –§–ó-374 (\"–ó–∞–∫–æ–Ω –Ø—Ä–æ–≤–æ–π\"), –§–ó-149 (\"–û–± –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\"), –§–ó-152 (\"–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\") –º—ã –≥–æ—Ç–æ–≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å.\n\n"
                     "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–∞–∫–∂–µ: @Episthema</span></blockquote>",
                parse_mode='HTML',
                chat_id=callback_query.message.chat.id,
                message_id=main_menu_message_id,
                reply_markup=get_main_menu()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await callback_query.answer()

    @dp.callback_query_handler(text="plus", state=UserState.MainMenu)
    async def show_plus_vpn(callback_query: types.CallbackQuery, state: FSMContext):
        user_data = await state.get_data()
        main_menu_message_id = user_data.get("main_menu_message_id")
        try:
            await callback_query.message.bot.edit_message_text(
                text="‚ùóÔ∏è–í —É—Å–ª–æ–≤–∏—è—Ö 2025-–æ–≥–æ –≥–æ–¥–∞, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏ –±—ã–ª –∑–∞–º–µ–¥–ª–µ–Ω. –≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Å —É–≥—Ä–æ–∑–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–æ –∏ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ¬´–ë–µ–ª—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –†–§¬ª. –ú–Ω–æ–≥–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤—ã–¥–∞—é—Ç –Ω–∏–∑–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –Ω–µ–±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –æ—Å—Ç–∞–ª–∞—Å—å —Ä–∞–±–æ—á–µ–π. <b>–ò —ç—Ç–æ —É–∂–µ –Ω–µ —Å–æ–Ω –∏ –Ω–µ —Å–ª—É—Ö, –∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å...</b>\n"
                     "ü§ù<b>–ù–æ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—à–ª–∞ —Å–ø–æ—Å–æ–±, –∫–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.</b> üìë–° –Ω–æ–≤–µ–π—à–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º XRay –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥ VK —ç—Ç–æ –º—Ç–∞–ª–æ –≤–æ–∑–º–æ–∂–Ω—ã–º! –ê –ø—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è:\n"
                     "<b>‚úä–° –Ω–∞—à–∏–º –í–ü–ù–æ–º –≤–∞–º –Ω–µ —Å—Ç—Ä–∞—à–Ω—ã –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–∞–∂–µ —Å –º–æ–±–∏–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –Ω–µ –±–æ—è—Ç—å—Å—è –æ —Ç–æ–º, —á—Ç–æ –≤–∞—à–∏ –ª–æ–≥–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ —É—Ç–µ–∫–∞—é—Ç.</b>\n\n"
                     "<b>‚úÖ–° –ù–ê–ú–ò –í–´ –í–°–ï–ì–î–ê –í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ò –í–°–ï–ì–î–ê –í –°–ï–¢–ò!</b>\n\n"
                     "<span class='tg-spoiler'><b>–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –µ—Å–ª–∏ –≤–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –í–ö, —Ç–æ –ª—é–±–æ–π —Ç—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ –Ω–∞—à –í–ü–ù –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞–º –±–µ–∑–ª–∏–º–∏—Ç.</b></span>",
                parse_mode='HTML',
                chat_id=callback_query.message.chat.id,
                message_id=main_menu_message_id,
                reply_markup=get_main_menu()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await callback_query.answer()

    @dp.message_handler(commands=['admin'], state='*')
    async def admin_panel(message: types.Message, state: FSMContext):
        await state.finish()
        user_id = message.from_user.id
        if not is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return

        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_panel())

    @dp.callback_query_handler(text="view_users")
    async def view_users(callback_query: types.CallbackQuery):
        user_id = callback_query.from_user.id
        if not is_admin(user_id):
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        stats = get_user_stats()
        if stats is None:
            await callback_query.message.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        response = (
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['total']}\n"
            f"–ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {stats['24h']}\n"
            f"–ù–æ–≤—ã—Ö –∑–∞ 3 –¥–Ω—è: {stats['3d']}\n"
            f"–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['7d']}\n"
            f"–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['30d']}"
        )
        await callback_query.message.answer(response)
        await callback_query.answer()

    @dp.callback_query_handler(text="download_db")
    async def download_db(callback_query: types.CallbackQuery):
        user_id = callback_query.from_user.id
        if not is_admin(user_id):
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        users = get_all_users()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: [{'tg_id': int, 'vpn_id': str, 'username': str, 'registered_at': datetime}, ...]
        if users is None:
            await callback_query.message.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerow(['TG ID', 'VPN ID', 'Username', 'Registered At'])  # –ó–∞–≥–æ–ª–æ–≤–∫–∏

        for user in users:
            writer.writerow([user['tg_id'], user['vpn_id'], user['username'], user['registered_at']])

        output.seek(0)
        file = types.InputFile(output, filename="users_db.csv")

        await callback_query.message.bot.send_document(
            chat_id=callback_query.message.chat.id,
            document=file,
            caption="–í—ã–∫–∞—á–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)"
        )
        await callback_query.answer()

    @dp.callback_query_handler(text="set_config")
    async def set_config_prompt(callback_query: types.CallbackQuery, state: FSMContext):
        user_id = callback_query.from_user.id
        if not is_admin(user_id):
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥:")
        await state.set_state(UserState.AwaitingNewConfig)
        await callback_query.answer()

    @dp.message_handler(state=UserState.AwaitingNewConfig)
    async def process_new_config(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        if not is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            await state.finish()
            return

        new_config = message.text
        if update_config(new_config):
            await message.answer(f"–ö–æ–Ω—Ñ–∏–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_config}")
            logging.info(f"–ê–¥–º–∏–Ω {user_id} –æ–±–Ω–æ–≤–∏–ª –∫–æ–Ω—Ñ–∏–≥ –Ω–∞: {new_config}")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        await state.finish()

    @dp.callback_query_handler(text="broadcast")
    async def broadcast_prompt(callback_query: types.CallbackQuery, state: FSMContext):
        user_id = callback_query.from_user.id
        if not is_admin(user_id):
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await state.set_state(UserState.AwaitingBroadcastText)
        await callback_query.answer()

    @dp.message_handler(state=UserState.AwaitingBroadcastText)
    async def process_broadcast_text(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        if not is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            await state.finish()
            return

        await state.update_data(broadcast_text=message.text)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
        await state.set_state(UserState.AwaitingBroadcastPhoto)

    @dp.message_handler(content_types=['photo'], state=UserState.AwaitingBroadcastPhoto)
    async def process_broadcast_photo(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        if not is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            await state.finish()
            return

        photo = message.photo[-1].file_id
        await state.update_data(broadcast_photo=photo)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
        await state.set_state(UserState.AwaitingBroadcastUrl)

    @dp.message_handler(commands=['skip'], state=UserState.AwaitingBroadcastPhoto)
    async def skip_broadcast_photo(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        if not is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            await state.finish()
            return

        await state.update_data(broadcast_photo=None)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
        await state.set_state(UserState.AwaitingBroadcastUrl)

    @dp.message_handler(state=UserState.AwaitingBroadcastUrl)
    async def process_broadcast_url(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        if not is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            await state.finish()
            return

        url = message.text if message.text != "/skip" else None
        await state.update_data(broadcast_url=url)
        await send_broadcast(message, state)

    @dp.message_handler(commands=['skip'], state=UserState.AwaitingBroadcastUrl)
    async def skip_broadcast_url(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        if not is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            await state.finish()
            return

        await state.update_data(broadcast_url=None)
        await send_broadcast(message, state)

    async def send_broadcast(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        broadcast_text = user_data.get("broadcast_text")
        broadcast_photo = user_data.get("broadcast_photo")
        broadcast_url = user_data.get("broadcast_url")

        user_ids = get_all_user_ids()
        sent_count = 0
        for user_id in user_ids:
            try:
                keyboard = get_broadcast_keyboard(broadcast_url)
                if broadcast_photo:
                    await message.bot.send_photo(
                        chat_id=user_id,
                        photo=broadcast_photo,
                        caption=broadcast_text,
                        reply_markup=keyboard
                    )
                else:
                    await message.bot.send_message(
                        chat_id=user_id,
                        text=broadcast_text,
                        reply_markup=keyboard
                    )
                sent_count += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        await state.finish()

    @dp.callback_query_handler(text="delete_broadcast")
    async def delete_broadcast_message(callback_query: types.CallbackQuery):
        try:
            await callback_query.message.bot.delete_message(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id
            )
            await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
